{
	"info": {
		"_postman_id": "8d2de19d-0d60-4ee2-b16c-2d47d97c91d7",
		"name": "QA Challenge- Master",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23677284",
		"_collection_link": "https://solar-shuttle-279869.postman.co/workspace/Paylocity~0364be1d-a425-4bea-9b26-aec873b56a38/collection/23677284-8d2de19d-0d60-4ee2-b16c-2d47d97c91d7?action=share&source=collection_link&creator=23677284"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "Get Employee List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'partitionKey' and 'sortKey' fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee).to.have.property('partitionKey');",
									"        pm.expect(employee).to.have.property('sortKey');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"The dependants field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (employee) {",
									"        pm.expect(employee.dependants).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Employee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const id = responseJson.id;",
									"pm.environment.set(\"id\", id);",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"PartitionKey is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.partitionKey).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"SortKey is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.sortKey).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SortKey should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{nameCreate}}\",\n    \"lastName\": \"{{lastnameCreate}}\",\n    \"dependants\": {{dependantsCreate}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object with specific properties\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object').and.to.include.all.keys(",
									"        'partitionKey',",
									"        'sortKey',",
									"        'username',",
									"        'id',",
									"        'firstName',",
									"        'lastName',",
									"        'dependants',",
									"        'expiration',",
									"        'salary',",
									"        'gross',",
									"        'benefitsCost',",
									"        'net'",
									"    );",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"First name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{id}}\",\n    \"firstName\": \"{{nameUpdate}}\",\n    \"lastName\": \"{{lastnameUpdate}}\",\n    \"dependants\": {{dependantsUpdate}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "Get Employee List With Incorrect Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic VGVzdFVzZXIzMjA6Q3hwMz91WC8zOzVB"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Employee With Different Body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const id = responseJson.id;",
									"pm.environment.set(\"id\", id);",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"PartitionKey is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.partitionKey).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"SortKey is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.sortKey).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SortKey should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{nameCreate}}\",\n    \"lastName\": \"{{lastnameCreate}}\",\n    \"dependants\": {{dependantsCreate}},\n    \"extraRow\": 13123123,\n    \"extraRow1\": \"something\",\n    \"extraRow2\": \"something\",\n    \"extraRow3\": \"something\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee With Incorrect ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/e0fb3301-cb3e-47f1-9b51-35fff179sajhk",
							"host": [
								"{{url}}"
							],
							"path": [
								"e0fb3301-cb3e-47f1-9b51-35fff179sajhk"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee With Incorrect ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"e0fb3301-cb3e-47f1-9b51-35fbgf94265bb\",\n    \"firstName\": \"{{nameUpdate}}\",\n    \"lastName\": \"{{lastnameUpdate}}\",\n    \"dependants\": {{dependantsUpdate}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_Bin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"variable_key\");\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");\r",
									"// Verify the length of response data\r",
									"pm.test(\"The response data should have at least 1 property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const dataKeys = Object.keys(responseData);\r",
									"   \r",
									"    pm.expect(dataKeys.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/get",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee With Incorrect ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/e0fb3301-cb3e-47f1-9b51-35ff32523sdg",
							"host": [
								"{{url}}"
							],
							"path": [
								"e0fb3301-cb3e-47f1-9b51-35ff32523sdg"
							]
						}
					},
					"response": []
				},
				{
					"name": "new request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateRandomString(length) {",
					"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
					"    let result = \"\";",
					"    for (let i = 0; i < length; i++) {",
					"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"function generateRandomDependants() {",
					"    return Math.floor(Math.random() * 33);",
					"}",
					"",
					"pm.environment.set(\"nameCreate\", generateRandomString(8));",
					"pm.environment.set(\"lastnameCreate\", generateRandomString(10));",
					"pm.environment.set(\"dependantsCreate\", generateRandomDependants());",
					"pm.environment.set(\"nameUpdate\", generateRandomString(8));",
					"pm.environment.set(\"lastnameUpdate\", generateRandomString(10));",
					"pm.environment.set(\"dependantsUpdate\", generateRandomDependants());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}